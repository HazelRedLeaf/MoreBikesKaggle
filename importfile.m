function station201deploy = importfile1(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   STATION201DEPLOY = IMPORTFILE1(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   STATION201DEPLOY = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   station201deploy = importfile1('station_201_deploy.csv', 2, 746);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/11/23 20:28:15

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace specified string with 3.0
R = cellfun(@(x) ischar(x) && strcmp(x,'Wednesday'),raw); % Find non-numeric cells
raw(R) = {3.0}; % Replace non-numeric cells

%% Replace specified string with 4.0
R = cellfun(@(x) ischar(x) && strcmp(x,'Thursday'),raw); % Find non-numeric cells
raw(R) = {4.0}; % Replace non-numeric cells

%% Replace specified string with 5.0
R = cellfun(@(x) ischar(x) && strcmp(x,'Friday'),raw); % Find non-numeric cells
raw(R) = {5.0}; % Replace non-numeric cells

%% Replace specified string with 6.0
R = cellfun(@(x) ischar(x) && strcmp(x,'Saturday'),raw); % Find non-numeric cells
raw(R) = {6.0}; % Replace non-numeric cells

%% Replace specified string with 7.0
R = cellfun(@(x) ischar(x) && strcmp(x,'Sunday'),raw); % Find non-numeric cells
raw(R) = {7.0}; % Replace non-numeric cells

%% Replace specified string with 1.0
R = cellfun(@(x) ischar(x) && strcmp(x,'Monday'),raw); % Find non-numeric cells
raw(R) = {1.0}; % Replace non-numeric cells

%% Replace specified string with 2.0
R = cellfun(@(x) ischar(x) && strcmp(x,'Tuesday'),raw); % Find non-numeric cells
raw(R) = {2.0}; % Replace non-numeric cells

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
station201deploy = table;
station201deploy.station = cell2mat(raw(:, 1));
station201deploy.latitude = cell2mat(raw(:, 2));
station201deploy.longitude = cell2mat(raw(:, 3));
station201deploy.numDocks = cell2mat(raw(:, 4));
station201deploy.timestamp = cell2mat(raw(:, 5));
station201deploy.year = cell2mat(raw(:, 6));
station201deploy.month = cell2mat(raw(:, 7));
station201deploy.day = cell2mat(raw(:, 8));
station201deploy.hour = cell2mat(raw(:, 9));
station201deploy.weekday = cell2mat(raw(:, 10));
station201deploy.weekhour = cell2mat(raw(:, 11));
station201deploy.isHoliday = cell2mat(raw(:, 12));
station201deploy.windMaxSpeedms = cell2mat(raw(:, 13));
station201deploy.windMeanSpeedms = cell2mat(raw(:, 14));
station201deploy.windDirectiongrades = cell2mat(raw(:, 15));
station201deploy.temperatureC = cell2mat(raw(:, 16));
station201deploy.relHumidityHR = cell2mat(raw(:, 17));
station201deploy.airPressuremb = cell2mat(raw(:, 18));
station201deploy.precipitationlm2 = cell2mat(raw(:, 19));
station201deploy.bikes_3h_ago = cell2mat(raw(:, 20));
station201deploy.full_profile_3h_diff_bikes = cell2mat(raw(:, 21));
station201deploy.full_profile_bikes = cell2mat(raw(:, 22));
station201deploy.short_profile_3h_diff_bikes = cell2mat(raw(:, 23));
station201deploy.short_profile_bikes = cell2mat(raw(:, 24));
station201deploy.bikes = cell2mat(raw(:, 25));

